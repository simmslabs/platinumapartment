// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id             String   @id @default(cuid())
  email          String?   @unique
  password       String
  firstName      String
  lastName       String
  role           UserRole @default(TENANT)
  phone          String?
  address        String?
  idCard         String? // ID card number (nullable for now)
  gender         Gender? // Gender field
  profilePicture String? // Base64 or URL to profile picture
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  bookings        Booking[]
  reviews         Review[]
  notifications   Notification[]
  paymentAccounts PaymentAccount[] // User's saved payment methods
  receipts        Receipt[] // User's receipts
  transactions    Transaction[] // User's transaction history

  // Indexes for better PostgreSQL performance
  @@index([email])
  @@index([role])
  @@index([createdAt])
  @@index([idCard])
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
  TENANT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

// Block Management
model Block {
  id          String   @id @default(cuid())
  name        String   @unique // Block identifier (e.g., "A", "B", "East Wing", etc.)
  description String? // Optional description of the block
  floors      Int? // Number of floors in this block
  location    String? // Physical location or address details
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rooms Room[]

  // Indexes for better PostgreSQL performance
  @@index([name])
  @@index([createdAt])
}

// Room Management
model Room {
  id            String        @id @default(cuid())
  number        String
  typeId        String // Foreign key to RoomType
  status        RoomStatus    @default(AVAILABLE)
  blockId       String? // Make optional for migration, then required later
  block         String        @default("A") // Keep for backward compatibility during migration
  floor         Int
  capacity      Int
  pricePerNight Float
  pricingPeriod PricingPeriod @default(NIGHT) // New field for pricing period
  basePrice     Float? // Optional base price for calculations
  description   String?
  amenities     String? // JSON string of amenities
  images        String? // JSON string of image URLs
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  type          RoomType         @relation(fields: [typeId], references: [id])
  blockRelation Block?           @relation(fields: [blockId], references: [id])
  bookings      Booking[]
  maintenance   MaintenanceLog[]
  assets        RoomAsset[] // Assets in this room

  // Composite unique constraint: room number unique within each block
  @@unique([number, blockId])
  // Indexes for better PostgreSQL performance
  @@index([status])
  @@index([typeId])
  @@index([blockId])
  @@index([floor])
  @@index([pricePerNight])
  @@index([pricingPeriod])
  @@index([createdAt])
}

model RoomType {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "ONE_BEDROOM_STANDARD"
  displayName String // e.g., "1 Bedroom Standard"
  description String? // Optional detailed description
  basePrice   Float? // Optional suggested base price
  maxCapacity Int? // Maximum recommended capacity
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rooms Room[]

  @@index([name])
  @@index([isActive])
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  OUT_OF_ORDER
}

enum PricingPeriod {
  NIGHT
  DAY
  WEEK
  MONTH
  YEAR
}

// Asset Management
// Asset Management - Separate asset definition from room assignment
model Asset {
  id             String        @id @default(cuid())
  name           String // Asset name (e.g., "Bed", "TV", "Chair", "Air Conditioner")
  category       AssetCategory // Category of the asset
  description    String? // Additional details about the asset
  serialNumber   String? // Serial number or identifier for tracked items
  purchaseDate   DateTime? // When the asset was purchased
  warrantyExpiry DateTime? // Warranty expiration date
  lastInspected  DateTime? // Last inspection date
  notes          String? // Maintenance notes or observations
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  roomAssignments RoomAsset[] // Many-to-many relationship with rooms
  maintenance     MaintenanceLog[] // Maintenance tasks for this asset

  // Indexes for better performance
  @@index([category])
  @@index([name])
  @@index([lastInspected])
  @@index([createdAt])
}

// Junction table for asset-room assignments with specific conditions and quantities
model RoomAsset {
  id         String         @id @default(cuid())
  roomId     String
  assetId    String
  quantity   Int            @default(1) // Number of this asset in this specific room
  condition  AssetCondition @default(GOOD) // Condition of the asset in this specific room
  assignedAt DateTime       @default(now())
  notes      String? // Room-specific notes about this asset
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  // Relations
  room  Room  @relation(fields: [roomId], references: [id], onDelete: Cascade)
  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  // Unique constraint to prevent duplicate assignments
  @@unique([roomId, assetId])
  @@index([roomId])
  @@index([assetId])
  @@index([condition])
  @@index([assignedAt])
}

enum AssetCategory {
  FURNITURE // Beds, chairs, tables, wardrobes, etc.
  ELECTRONICS // TV, AC, refrigerator, microwave, etc.
  BATHROOM // Shower, toilet, sink, mirror, etc.
  KITCHEN // Stove, oven, utensils, dishes, etc.
  BEDDING // Mattress, pillows, blankets, sheets, etc.
  LIGHTING // Lamps, ceiling lights, etc.
  SAFETY // Smoke detectors, fire extinguisher, etc.
  DECORATION // Artwork, plants, curtains, etc.
  CLEANING // Vacuum, cleaning supplies, etc.
  OTHER // Miscellaneous items
}

enum AssetCondition {
  EXCELLENT // Like new, perfect condition
  GOOD // Good condition, minor wear
  FAIR // Shows wear but functional
  POOR // Significant wear, needs attention
  DAMAGED // Damaged but repairable
  BROKEN // Not functional, needs replacement
  MISSING // Asset is missing/lost
}

// Booking Management
model Booking {
  id              String        @id @default(cuid())
  userId          String
  roomId          String
  checkIn         DateTime
  checkOut        DateTime
  guests          Int
  totalAmount     Float
  status          BookingStatus @default(PENDING)
  specialRequests String?
  deletedAt       DateTime? // Soft deletion field
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user            User             @relation(fields: [userId], references: [id])
  room            Room             @relation(fields: [roomId], references: [id])
  payment         Payment?
  securityDeposit SecurityDeposit?
  services        BookingService[]
  notifications   Notification[]
  receipts        Receipt[] // Booking-related receipts
  transactions    Transaction[] // Booking-related transactions

  // Indexes for better PostgreSQL performance
  @@index([userId])
  @@index([roomId])
  @@index([status])
  @@index([checkIn])
  @@index([checkOut])
  @@index([createdAt])
  @@index([deletedAt]) // Index for soft deletion queries
  @@index([checkIn, checkOut]) // Composite index for date range queries
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
}

// Payment Management
model Payment {
  id               String        @id @default(cuid())
  bookingId        String        @unique
  amount           Float
  method           PaymentMethod
  status           PaymentStatus @default(PENDING)
  transactionId    String?
  paidAt           DateTime?
  paymentAccountId String? // Link to payment account
  receiptId        String?       @unique // Link to receipt
  notes            String?
  failureReason    String? // Reason for failed payments
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  booking        Booking         @relation(fields: [bookingId], references: [id])
  paymentAccount PaymentAccount? @relation(fields: [paymentAccountId], references: [id])
  receipt        Receipt?        @relation(fields: [receiptId], references: [id])
  transactions   Transaction[] // One payment can have multiple transactions (refunds, partial payments)

  // Indexes
  @@index([method])
  @@index([status])
  @@index([paidAt])
  @@index([createdAt])
}

// Payment Accounts - Store customer payment methods
model PaymentAccount {
  id            String             @id @default(cuid())
  userId        String
  type          PaymentAccountType
  provider      PaymentProvider // e.g., STRIPE, PAYPAL, BANK
  accountNumber String? // Last 4 digits or masked account number
  cardLast4     String? // For card payments
  cardBrand     String? // VISA, MASTERCARD, etc.
  cardExpMonth  Int?
  cardExpYear   Int?
  bankName      String? // For bank transfers
  accountName   String? // Account holder name
  isDefault     Boolean            @default(false)
  isActive      Boolean            @default(true)
  providerData  String? // JSON string for provider-specific data
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id])
  payments     Payment[]
  transactions Transaction[]

  // Indexes
  @@index([userId])
  @@index([type])
  @@index([provider])
  @@index([isDefault])
}

// Receipts - Generate receipts for payments
model Receipt {
  id            String        @id @default(cuid())
  receiptNumber String        @unique
  paymentId     String?       @unique
  transactionId String?       @unique // Make unique for one-to-one relation
  bookingId     String?
  userId        String
  amount        Float
  tax           Float         @default(0)
  discount      Float         @default(0)
  totalAmount   Float
  currency      String        @default("GHS")
  description   String?
  items         String // JSON array of receipt items
  issuedAt      DateTime      @default(now())
  dueDate       DateTime?
  paidDate      DateTime?
  status        ReceiptStatus @default(PENDING)
  receiptType   ReceiptType   @default(PAYMENT)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id])
  booking     Booking?     @relation(fields: [bookingId], references: [id])
  payment     Payment?
  transaction Transaction? @relation(fields: [transactionId], references: [id])

  // Indexes
  @@index([receiptNumber])
  @@index([userId])
  @@index([bookingId])
  @@index([status])
  @@index([receiptType])
  @@index([issuedAt])
}

// Transactions - Detailed transaction log
model Transaction {
  id                String            @id @default(cuid())
  transactionNumber String            @unique
  paymentId         String?
  paymentAccountId  String?
  bookingId         String?
  userId            String
  amount            Float
  fee               Float             @default(0)
  netAmount         Float // amount - fee
  currency          String            @default("GHS")
  type              TransactionType
  status            TransactionStatus @default(PENDING)
  method            PaymentMethod
  provider          PaymentProvider?
  providerTxnId     String? // Provider's transaction ID
  reference         String? // External reference number
  description       String?
  metadata          String? // JSON string for additional data
  processedAt       DateTime?
  failureReason     String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  user           User            @relation(fields: [userId], references: [id])
  payment        Payment?        @relation(fields: [paymentId], references: [id])
  paymentAccount PaymentAccount? @relation(fields: [paymentAccountId], references: [id])
  booking        Booking?        @relation(fields: [bookingId], references: [id])
  receipt        Receipt?

  // Indexes
  @@index([transactionNumber])
  @@index([userId])
  @@index([paymentId])
  @@index([bookingId])
  @@index([type])
  @@index([status])
  @@index([method])
  @@index([provider])
  @@index([createdAt])
}

// Payment Method Configuration - System-wide payment method settings
model PaymentMethodConfig {
  id            String          @id @default(cuid())
  method        PaymentMethod   @unique
  provider      PaymentProvider
  isActive      Boolean         @default(true)
  displayName   String
  description   String?
  processingFee Float           @default(0)
  feeType       FeeType         @default(PERCENTAGE) // FLAT or PERCENTAGE
  minAmount     Float? // Minimum transaction amount
  maxAmount     Float? // Maximum transaction amount
  currencies    String          @default("GHS") // JSON array of supported currencies
  settings      String? // JSON string for provider-specific settings
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Indexes
  @@index([method])
  @@index([provider])
  @@index([isActive])
}

// Security Deposit Management
model SecurityDeposit {
  id              String                @id @default(cuid())
  bookingId       String                @unique
  amount          Float
  method          PaymentMethod
  status          SecurityDepositStatus @default(PENDING)
  transactionId   String?
  paidAt          DateTime?
  refundedAt      DateTime?
  refundAmount    Float?
  deductionAmount Float?                @default(0)
  deductionReason String?
  damageReport    String?
  processedBy     String? // User ID who processed the refund
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id])
}

enum SecurityDepositStatus {
  PENDING
  PAID
  REFUNDED
  PARTIALLY_REFUNDED
  FORFEITED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  ONLINE
  BANK_TRANSFER
  MOBILE_MONEY
  PAYPAL
  STRIPE
  VISA
  MASTERCARD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
  CANCELLED
}

enum PaymentAccountType {
  CREDIT_CARD
  DEBIT_CARD
  BANK_ACCOUNT
  MOBILE_WALLET
  DIGITAL_WALLET
  CRYPTO_WALLET
}

enum PaymentProvider {
  STRIPE
  PAYPAL
  VISA
  MASTERCARD
  MTN_MOBILE_MONEY
  VODAFONE_CASH
  AIRTELTIGO_MONEY
  GCB_BANK
  ECOBANK
  UBA_BANK
  BANK_OF_GHANA
  MANUAL
  CASH_COUNTER
}

enum ReceiptStatus {
  PENDING
  ISSUED
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

enum ReceiptType {
  PAYMENT
  REFUND
  DEPOSIT
  INVOICE
  CREDIT_NOTE
  ADJUSTMENT
}

enum TransactionType {
  PAYMENT
  REFUND
  PARTIAL_PAYMENT
  DEPOSIT
  WITHDRAWAL
  ADJUSTMENT
  FEE
  REVERSAL
  CHARGEBACK
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  EXPIRED
  REVERSED
}

enum FeeType {
  FLAT
  PERCENTAGE
}

// Additional Services
model Service {
  id          String          @id @default(cuid())
  name        String
  description String?
  price       Float
  category    ServiceCategory
  available   Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  bookingServices BookingService[]
}

enum ServiceCategory {
  FOOD_BEVERAGE
  SPA
  LAUNDRY
  TRANSPORT
  ENTERTAINMENT
  BUSINESS
  OTHER
}

model BookingService {
  id         String   @id @default(cuid())
  bookingId  String
  serviceId  String
  quantity   Int      @default(1)
  totalPrice Float
  createdAt  DateTime @default(now())

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])

  @@unique([bookingId, serviceId])
}

// Maintenance Management
model MaintenanceLog {
  id          String            @id @default(cuid())
  roomId      String
  assetId     String? // Optional: maintenance can be for specific asset
  type        MaintenanceType
  description String
  status      MaintenanceStatus @default(PENDING)
  priority    Priority          @default(MEDIUM)
  reportedBy  String?
  assignedTo  String?
  startDate   DateTime?
  endDate     DateTime?
  cost        Float?
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  room  Room   @relation(fields: [roomId], references: [id])
  asset Asset? @relation(fields: [assetId], references: [id])

  // Indexes for better performance
  @@index([roomId])
  @@index([assetId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
}

enum MaintenanceType {
  CLEANING
  REPAIR
  INSPECTION
  UPGRADE
  PREVENTIVE
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Tenant Reviews
model Review {
  id        String         @id @default(cuid())
  userId    String
  rating    Int // 1-5
  title     String?
  comment   String?
  category  ReviewCategory @default(OVERALL)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
}

enum ReviewCategory {
  OVERALL
  ROOM
  SERVICE
  FOOD
  LOCATION
  CLEANLINESS
}

// Apartment Analytics
model Analytics {
  id            String   @id @default(cuid())
  date          DateTime @unique
  totalBookings Int      @default(0)
  totalRevenue  Float    @default(0)
  occupancyRate Float    @default(0)
  avgRating     Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Notification Management
model Notification {
  id        String              @id @default(cuid())
  bookingId String?
  userId    String
  type      NotificationType
  title     String
  message   String
  channel   NotificationChannel @default(EMAIL)
  status    NotificationStatus  @default(PENDING)
  sentAt    DateTime?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  // Relations
  booking Booking? @relation(fields: [bookingId], references: [id])
  user    User     @relation(fields: [userId], references: [id])

  // Indexes
  @@index([userId])
  @@index([bookingId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}

enum NotificationType {
  BOOKING_CONFIRMATION
  CHECK_IN_REMINDER
  CHECK_OUT_REMINDER
  SEVENTY_FIVE_PERCENT_STAY
  PAYMENT_DUE
  PAYMENT_RECEIVED
  MAINTENANCE_NOTICE
  GENERAL_ANNOUNCEMENT
}

enum NotificationChannel {
  EMAIL
  SMS
  EMAIL_SMS
  PUSH
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}

// System Settings
model Setting {
  id          String          @id @default(cuid())
  key         String          @unique
  value       String?
  isSecret    Boolean         @default(false)
  description String?
  category    SettingCategory @default(GENERAL)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum SettingCategory {
  GENERAL
  EMAIL
  SMS
  SECURITY
  API
}
